// <auto-generated />
using System;
using DnDTeamGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnDTeamGame.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231020170341_Updates")]
    partial class Updates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AbilityEntityCharacterEntity", b =>
                {
                    b.Property<int>("AbilitiesListAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterListCharacterId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesListAbilityId", "CharacterListCharacterId");

                    b.HasIndex("CharacterListCharacterId");

                    b.ToTable("AbilityEntityCharacterEntity");
                });

            modelBuilder.Entity("ArmourEntityCharacterEntity", b =>
                {
                    b.Property<int>("ArmoursListArmourId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterListCharacterId")
                        .HasColumnType("int");

                    b.HasKey("ArmoursListArmourId", "CharacterListCharacterId");

                    b.HasIndex("CharacterListCharacterId");

                    b.ToTable("ArmourEntityCharacterEntity");
                });

            modelBuilder.Entity("CharacterEntityConsumableEntity", b =>
                {
                    b.Property<int>("CharacterListCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumablesListConsumableId")
                        .HasColumnType("int");

                    b.HasKey("CharacterListCharacterId", "ConsumablesListConsumableId");

                    b.HasIndex("ConsumablesListConsumableId");

                    b.ToTable("CharacterEntityConsumableEntity");
                });

            modelBuilder.Entity("CharacterEntityVehicleEntity", b =>
                {
                    b.Property<int>("CharacterListCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("VehiclesListVehicleId")
                        .HasColumnType("int");

                    b.HasKey("CharacterListCharacterId", "VehiclesListVehicleId");

                    b.HasIndex("VehiclesListVehicleId");

                    b.ToTable("CharacterEntityVehicleEntity");
                });

            modelBuilder.Entity("CharacterEntityWeaponEntity", b =>
                {
                    b.Property<int>("CharacterListCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponsListWeaponId")
                        .HasColumnType("int");

                    b.HasKey("CharacterListCharacterId", "WeaponsListWeaponId");

                    b.HasIndex("WeaponsListWeaponId");

                    b.ToTable("CharacterEntityWeaponEntity");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.AbilityEntity", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityId"));

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbilityId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.ArmourEntity", b =>
                {
                    b.Property<int>("ArmourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArmourId"));

                    b.Property<string>("ArmourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArmourId");

                    b.ToTable("Armours");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.BodyTypeEntity", b =>
                {
                    b.Property<int>("BodyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTypeId"));

                    b.Property<string>("BodyTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodyTypeId");

                    b.ToTable("BodyTypes");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.CharacterClassEntity", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterClassId"));

                    b.Property<string>("CharacterClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.CharacterEntity", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<double>("CharacterBaseAttackDamage")
                        .HasColumnType("float");

                    b.Property<int>("CharacterBaseDefense")
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<string>("CharacterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharacterHealth")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("HairColorId")
                        .HasColumnType("int");

                    b.Property<int>("HairStyleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("HairColorId");

                    b.HasIndex("HairStyleId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.ConsumableEntity", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<int?>("ConsumableAttackIncreaseAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumableDefenseIncreaseAmount")
                        .HasColumnType("int");

                    b.Property<string>("ConsumableDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConsumableEffect")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ConsumableHealthIncreaseAmount")
                        .HasColumnType("int");

                    b.Property<bool>("ConsumableIncreaseAttack")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsumableIncreaseDefense")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsumableIncreaseHealth")
                        .HasColumnType("bit");

                    b.Property<string>("ConsumableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ConsumableId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.HairColorEntity", b =>
                {
                    b.Property<int>("HairColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HairColorId"));

                    b.Property<string>("HairColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HairColorId");

                    b.ToTable("HairColors");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.HairStyleEntity", b =>
                {
                    b.Property<int>("HairStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HairStyleId"));

                    b.Property<string>("HairStyleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HairStyleId");

                    b.ToTable("HairStyles");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.VehicleEntity", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("VehicleAbility")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleAttackDamage")
                        .HasColumnType("int");

                    b.Property<string>("VehicleDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("VehicleHealth")
                        .HasColumnType("float");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("VehicleSpeed")
                        .HasColumnType("float");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.WeaponEntity", b =>
                {
                    b.Property<int>("WeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponId"));

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeaponId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AbilityEntityCharacterEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.AbilityEntity", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesListAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacterListCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArmourEntityCharacterEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.ArmourEntity", null)
                        .WithMany()
                        .HasForeignKey("ArmoursListArmourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacterListCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEntityConsumableEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacterListCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.ConsumableEntity", null)
                        .WithMany()
                        .HasForeignKey("ConsumablesListConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEntityVehicleEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacterListCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.VehicleEntity", null)
                        .WithMany()
                        .HasForeignKey("VehiclesListVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEntityWeaponEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacterListCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.WeaponEntity", null)
                        .WithMany()
                        .HasForeignKey("WeaponsListWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.CharacterEntity", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.BodyTypeEntity", "BodyType")
                        .WithMany("CharacterList")
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.CharacterClassEntity", "CharacterClass")
                        .WithMany("CharacterList")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.HairColorEntity", "HairColor")
                        .WithMany("CharacterList")
                        .HasForeignKey("HairColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.HairStyleEntity", "HairStyle")
                        .WithMany("CharacterList")
                        .HasForeignKey("HairStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.UserEntity", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("CharacterClass");

                    b.Navigation("HairColor");

                    b.Navigation("HairStyle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDTeamGame.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DnDTeamGame.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.BodyTypeEntity", b =>
                {
                    b.Navigation("CharacterList");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.CharacterClassEntity", b =>
                {
                    b.Navigation("CharacterList");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.HairColorEntity", b =>
                {
                    b.Navigation("CharacterList");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.HairStyleEntity", b =>
                {
                    b.Navigation("CharacterList");
                });

            modelBuilder.Entity("DnDTeamGame.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
